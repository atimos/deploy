[[steps]]
    description="Setup environment"
    commands = {type = "wasm", uri = "core://env", command = "set", args = {dockerhub = "https://registry.hub.docker.com"}}

[[steps]]
    description="Run checks, unit tests and integration tests"
    commands = [
        {type = "unit", id = "composer-install", args = {dev-mode = "dev"}},
        {mode = "parallel", commands = [
            {type = "oci", repository = "{{ dockerhub }}", image = "composer", command = "composer", args = "test:unit"},
            {type = "oci", repository = "{{ dockerhub }}", image = "composer", command = "composer", args = "test:integration"},
            {type = "oci", repository = "{{ dockerhub }}", image = "composer", command = "composer", args = "check:style"},
            {type = "oci", repository = "{{ dockerhub }}", image = "composer", command = "composer", args = "check:mess"},
        ]},
    ]

[[steps]]
    description="Build docker images"
    commands = [
        {mode = "parallel", commands = [
            {type = "wasm", uri = "core://env", command = "set_local", args = {tag = "{{env.docker_repository}}:{{env.service_name}}/{{env.build_number}}"}},
            {type = "unit", id = "composer-install", args = {dev-mode = "no-dev"}},
        ]},
        {mode = "parallel", commands = [
            {type = "unit", id = "build-image", args = {image = "Dockerfile.fpm", tag = "{{env.tag}}/fpm"}},
            {type = "unit", id = "build-image", args = {image = "Dockerfile.nginx", tag = "{{env.tag}}/nginx"}},
        ]},
    ]

[[steps]]
    description="Run system and integration tests"
    commands = [
        {type = "unit", id = "composer-install", args = {dev-mode = "dev"}},
        {type = "oci", repository = "https://registry.hub.docker.com", image = "composer", command = "composer", args = "test:system"},
        {type = "oci", repository = "https://registry.hub.docker.com", image = "composer", command = "composer", args = "test:e2e"},
    ]

[[steps]]
    description="Collect test results"
    commands = {mode = "parallel", run-on-status = ["abort", "error", "success"] , commands = [
        {type = "wasm", uri = "core://report", command = "publish", args = {input = "test/report/php/report.xml", type = "junit"}},
        {type = "wasm", uri = "core://report", command = "publish", args = {input = "test/report/php/clover.xml", type = "clover"}},
    ]}

[units.build-image]
    args = [{name = "image"}, {name = "tag"}]
    commands = {type = "oci", repository = "https://registry.hub.docker.com", image = "docker", commands = [
        {command = "build", args = {-f = "{{args.image}}", -t = "{{args.tag}}"}},
        {command = "push", args = "{{args.tag}}"},
    ]}

[units.composer-install]
    args= [{name = "dev-mode"}]
    description="Install packages"
    commands = {type = "oci", repository = "https://registry.hub.docker.com", image = "composer", command = "composer", args = ["install", "--{{args.dev-mode}}"]}
